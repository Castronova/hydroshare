<?php

require 'data_model_file_ops.php';

// =-=-=-=-=-=-=-
// helper function to work out the new RDM Directory given a new file
function data_model_make_data_path( $title, $real_path, &$new_path ) {

    // =-=-=-=-=-=-=-
    // remove spaces from title to simplify
    $stripped_title = str_replace( " ", "", $title );

    // =-=-=-=-=-=-=-
    // determine if the file in question is already in the 
    // Data Model Directory
    if( strpos( $real_path, $stripped_title ) != false ) {
        // =-=-=-=-=-=-=-
        // determine if the file in question is already in the 
        $new_path = $real_path;
        return true;
    }

    // =-=-=-=-=-=-=-
    // otherwise we build a new path
    $root_dir = drupal_dirname( $real_path );
    $tmp_dir = $root_dir . "/" . $stripped_title;

    // =-=-=-=-=-=-=-
    // test if the dir exists, if it fails we add a counter to it and try again.
    $ctr = 0;
    $ret = true;
    while( $ret ) {
        $ret = file_prepare_directory( $tmp_dir );
   
        // =-=-=-=-=-=-=-
        // failed, add a ctr to it as it is a collision
        if( true == $ret ) {
            $tmp_dir = $tmp_dir . "." . (string)$ctr;
        }

        // =-=-=-=-=-=-=-
        // if the counter is greater than a perhaps large number
        // we should break as something must be wrong.
        if( true == $ret && $ctr > 10 ) {
            break;
        }
        
    }

    if( true == $ret ) {
        $new_path = NULL;
        return false;
    } else {
        $new_path = $tmp_dir;
        return true;
    }

} // data_model_make_data_path

// =-=-=-=-=-=-=-
// get the file url from the node if any
function data_model_get_file_from_node( $node, &$file ) {
    // =-=-=-=-=-=-=-
    // See if a file has been added
    $file      = NULL;
    if ($file_items = field_get_items('node', $node, 'field_file')) {
        // Get the first file item
        $file_item = array_shift($file_items);
        $file = file_load( $file_item['fid'] );

        return true;
    } else {
        $file = NULL;
        return false;
    
    }

} // data_model_get_file_from_node

// =-=-=-=-=-=-=-
// get the metadata field value from the node if any
function data_model_get_node_metadata_field_value( $node, $name, &$value ) {
    // =-=-=-=-=-=-=-
    // get the coverage
    $field_name = "field_" . $name;
    $items = field_get_items( 'node', $node, $field_name );
        
    $value = NULL;
    if( NULL != $items ) {
        $item = array_shift( $items ); 
        $value = $item[ 'value' ];
        return true;
    }

    return false;

} // data_model_get_node_metadata_field_value

// =-=-=-=-=-=-=-
// write out an xml file given metadata from the node ( dublin core++ )
function data_model_write_science_metadata( $node, $dir ) {
    // =-=-=-=-=-=-=-
    // 
    $user = user_load( $node->uid );
    $user_name = $user->name;

    $contributor = NULL;
    data_model_get_node_metadata_field_value( $node, "contributor", $contributor );

    $subject = NULL;
    data_model_get_node_metadata_field_value( $node, "subject", $subject );

    $relation = NULL;
    data_model_get_node_metadata_field_value( $node, "relation", $relation );

    $source = NULL;
    data_model_get_node_metadata_field_value( $node, "source", $source );

    $type = NULL;
    data_model_get_node_metadata_field_value( $node, "type", $type );

    $rights = NULL;
    data_model_get_node_metadata_field_value( $node, "rights", $rights );
 
    $format = NULL;
    data_model_get_node_metadata_field_value( $node, "format", $format );

    $coverage = NULL;
    data_model_get_node_metadata_field_value( $node, "coverage", $coverage );

    $title = NULL;
    data_model_get_node_metadata_field_value( $node, "title", $title );
    
    $body = NULL;
    data_model_get_node_metadata_field_value( $node, "body", $body );

    $url = url() . "/node/" . $node->nid;

    $date = date( "Y-m-d" );

    $NA = "no_value";
    $meta_data = "
<?xml version=\"1.0\"?>
<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
xmlns:dc=\"http://purl.org/dc/elements/1.1/\">  
<rdf:Description>
    <dc:creator>$user_name</dc:creator>
    <dc:contributor>$contributor</dc:contributor>
    <dc:publisher>HydroShare</dc:publisher>
    <dc:subject>$subject</dc:subject>
    <dc:description>$body</dc:description>
    <dc:identifier>$url</dc:identifier>
    <dc:relation>$relation</dc:relation>
    <dc:source>$source</dc:source>
    <dc:rights>$rights</dc:rights>
    <dc:format>$format</dc:format>
    <dc:type>$type</dc:type>
    <dc:title>$title</dc:title>
    <dc:date>$date</dc:date>
    <dc:coverage>$coverage</dc:coverage>
    <dc:language>$NA</dc:language>
</rdf:Description>
</rdf:RDF>";

    // =-=-=-=-=-=-=-
    // actually write the file
    file_put_contents( "$dir/science_metadata.xml", $meta_data );

    return true;

} // data_model_write_science_metadata

// =-=-=-=-=-=-=-
// write out an xml file given metadata from the node ( dublin core++ )
function data_model_write_system_metadata( $node, $dir ) {
    $meta_data = 
"<?xml version=\"1.0\"?>
<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"
xmlns:dc=\"http://purl.org/dc/elements/1.1/\">
</rdf:RDF>";

    // =-=-=-=-=-=-=-
    // actually write the file
    file_put_contents( "$dir/system_metadata.xml", $meta_data );

    return true;

} // data_model_write_system_metadata

// =-=-=-=-=-=-=-
// write out the BagIt metadata: manifest-sha1.txt & bagit.txt
function data_model_write_bagit_metadata( $dir ) {
    // =-=-=-=-=-=-=-
    // strip off the 'data' portion of the dir
    $rdm_dir = dirname( $dir );
    
    // =-=-=-=-=-=-=-
    // write the bagit file
    $meta_data = "BagIt-Version: 0.97\nTag-File-Character-Encoding: UTF-8";
    file_put_contents( "$rdm_dir/bagit.txt", $meta_data );

    // =-=-=-=-=-=-=-
    // iterate over the data dir and compute checksums
    // then write them to the manifest file
    $files = new RecursiveIteratorIterator( new RecursiveDirectoryIterator( $dir ), 
                                            RecursiveIteratorIterator::SELF_FIRST );
    foreach( $files as $file ) {
        // =-=-=-=-=-=-=-
        // compute the sha1 and put it in the manifest
        $sha1 = sha1_file( $file );
        
        // =-=-=-=-=-=-=-
        // trim the path to the data directory and beyond
        $trim_pos = strrpos( $file, "data" );
        $line     = $sha1 . " " . substr( $file, $trim_pos );
        file_put_contents( "$rdm_dir/manifest-sha1.txt", $line );

    } // foreach $file

    return true;

} // data_model_write_system_metadata


// =-=-=-=-=-=-=-
// hook to move file into Data Model Directory for this Resource
function data_model_node_presave( $node ) {

    // =-=-=-=-=-=-=-
    // get the title and use this as the directory name
    $title_items = field_get_items( 'node', $node, 'field_title' );
        
    $title = NULL;
    data_model_get_node_metadata_field_value( $node, "title", $title );
    
    // =-=-=-=-=-=-=-
    // get the file object from the node
    $file      = NULL;
    $real_path = NULL;
    if( true == data_model_get_file_from_node( $node, $file ) ) { 
        $file_uri = $file->uri;
    }

    // =-=-=-=-=-=-=-
    // something bad happened
    if( NULL == $title && NULL == $file_uri ) {
        drupal_set_message( "data_model_node_presave :: NULL title and file_uri" );
        return;
    }
    
    // =-=-=-=-=-=-=-
    // get the new path, if there is one.  if the real and new paths dont
    // match we need to make the Data Model Directory and then move the file
    $new_uri_path = NULL;
    if( data_model_make_data_path( $title, $file_uri, $new_uri_path ) ) {
        // =-=-=-=-=-=-=-
        // if new_uri_path != file_uri then we need to make a dir and
        // move the file.
        if( $file_uri != $new_uri_path ) {
            // =-=-=-=-=-=-=-
            // make the base directory
            if( !drupal_mkdir( $new_uri_path ) ) {
                drupal_set_message( "data_model_node_presave :: drupal_mkdir( $new_uri_path ) failed." );
                return false;

            }

            // =-=-=-=-=-=-=-
            // make the data directory per BagIt spec
            if( !drupal_mkdir( "$new_uri_path/data" ) ) {
                drupal_set_message( "data_model_node_presave :: drupal_mkdir( $new_uri_path/data ) failed." );
                return false;

            }

            // =-=-=-=-=-=-=-
            // move the file 
            // NOTE:: file_move requires a stream wrapper URI which is
            //        decidedly not an actual file path.
            $new_uri_path = $new_uri_path . "/data/" . drupal_basename( $file_uri );
            $fn  = drupal_basename( $file_uri );
            if( !file_move( $file, $new_uri_path ) ) {
                drupal_set_message( "data_model_node_presave :: file_move( $file_uri, $new_uri_path ) failed." );
                return false;
            }
        }

    } else {
        drupal_set_message( "data_model_node_presave :: data_model_make_data_path failed." );
        return false;
    }
 
    // =-=-=-=-=-=-=-
    // we need to operate on actual file paths now
    $new_file_path = drupal_realpath( $new_uri_path );

    // =-=-=-=-=-=-=-
    // write the science metadata file
    if( !data_model_write_science_metadata( $node, drupal_dirname( $new_file_path ) ) ) {
        drupal_set_message( "data_model_node_view :: failed to write science metadata for $new_file_path" );
        return NULL;

    }
 
    // =-=-=-=-=-=-=-
    // write the system metadata file
    if( !data_model_write_system_metadata( $node, drupal_dirname( $new_file_path ) ) ) {
        drupal_set_message( "data_model_node_view :: failed to write system metadata for $new_file_path" );
        return NULL;

    }

    // =-=-=-=-=-=-=-
    // write the BagIt metadata files
    if( !data_model_write_bagit_metadata( drupal_dirname( $new_file_path ) ) ) {
        drupal_set_message( "data_model_node_view :: failed to write bagit metadata for $new_file_path" );
        return NULL;
    }

} // data_model_node_presave

// =-=-=-=-=-=-=-
// add a explort button
function data_model_node_view( $node, $view_mode ) {
    // =-=-=-=-=-=-=-
    // only explort on full view
    if( "full" != $view_mode ) {
        return $node;
    }
 
    // =-=-=-=-=-=-=-
    // get the file object from the node
    $file      = NULL;
    $real_path = NULL;
    if( true == data_model_get_file_from_node( $node, $file ) ) { 
        $real_path = drupal_realpath( $file->uri );
    
    } else {
        error_log( "data_model_node_view :: failed to get file for node" );
        return NULL;

    }

    // =-=-=-=-=-=-=-
    // get the file directory
    $dir = drupal_dirname( $real_path );
    $dir = drupal_dirname( $dir );

    // =-=-=-=-=-=-=-
    // get the zip name of the directory
    $zip_file = NULL;
    if( data_model_zip_file_name( $dir, $zip_file ) == false ) {
        error_log( "data_model_node_view :: data_model_zip_file_name failed for $dir" );
        return NULL;

    }
    
    // =-=-=-=-=-=-=-
    // build the java script operation
    $op = "parent.location='http://avogadro.renci.org/export.php?file=" . $zip_file . "'";

    // =-=-=-=-=-=-=-
    // wire it to a button
    $node->content['button'] = array(
          '#type' => 'button',
          '#value' => t('Explort'),
          '#weight' => 50,
          '#attributes' => array('onClick' => $op),
          );

    // =-=-=-=-=-=-=-
    // win!!111one
    return $node;

} // data_model_node_view





















































