<?php

require 'data_model_file_ops.php';

// =-=-=-=-=-=-=-
// helper function to work out the new RDM Directory given a new file
function data_model_make_data_path( $title, $real_path, &$new_path ) {
    // =-=-=-=-=-=-=-
    // remove spaces from title to simplify
    $stripped_title = str_replace( " ", "", $title );

    // =-=-=-=-=-=-=-
    // determine if the file in question is already in the 
    // Data Model Directory
    if( strpos( $real_path, $stripped_title ) != false ) {
        // =-=-=-=-=-=-=-
        // determine if the file in question is already in the 
        $new_path = $real_path;
        return true;
    }

    // =-=-=-=-=-=-=-
    // otherwise we build a new path
    $root_dir = drupal_dirname( $real_path );
    $tmp_dir = $root_dir . "/" . $stripped_title;

    // =-=-=-=-=-=-=-
    // test if the dir exists, if it fails we add a counter to it and try again.
    $ctr = 0;
    $ret = true;
    while( $ret ) {
        $ret = file_prepare_directory( $tmp_dir );
   
        // =-=-=-=-=-=-=-
        // failed, add a ctr to it as it is a collision
        if( true == $ret ) {
            $tmp_dir = $tmp_dir . "." . (string)$ctr;
        }

        // =-=-=-=-=-=-=-
        // if the counter is greater than a perhaps large number
        // we should break as something must be wrong.
        if( true == $ret && $ctr > 10 ) {
            break;
        }
        
    }

    if( true == $ret ) {
        $new_path = NULL;
        return false;
    } else {
        $new_path = $tmp_dir;
        return true;
    }

} // data_model_make_data_path

// =-=-=-=-=-=-=-
// get the file url from the node if any
function data_model_get_file_from_node( $node, &$file ) {
    // =-=-=-=-=-=-=-
    // See if a file has been added
    $file      = NULL;
    if ($file_items = field_get_items('node', $node, 'field_file')) {
        // Get the first file item
        $file_item = array_shift($file_items);
        $file = file_load( $file_item['fid'] );

        return true;
    } else {
        $file = NULL;
        return false;
    
    }

} // data_model_get_file_from_node

// =-=-=-=-=-=-=-
// get the metadata field value from the node if any
function data_model_get_node_metadata_field_value( $node, $name, &$value ) {
    // =-=-=-=-=-=-=-
    // get the coverage
    $field_name = "field_" . $name;
    $items = field_get_items( 'node', $node, $field_name );
        
    $value = NULL;
    if( NULL != $items ) {
        $item = array_shift( $items ); 
        $value = $item[ 'value' ];
        return true;
    }

    return false;

} // data_model_get_node_metadata_field_value

// =-=-=-=-=-=-=-
// write out an xml file given metadata from the node ( dublin core++ )
function data_model_write_science_metadata( $node, $dir ) {
    // =-=-=-=-=-=-=-
    // Creator
    $name = NULL;
    data_model_get_node_metadata_field_value( $node, "name", $name );
    
    $email = NULL;
    data_model_get_node_metadata_field_value( $node, "email", $email );
 
    $organization = NULL;
    data_model_get_node_metadata_field_value( $node, "organization", $organization );

    $address = NULL;
    data_model_get_node_metadata_field_value( $node, "address", $address );
    
    $phone = NULL;
    data_model_get_node_metadata_field_value( $node, "phone_number", $phone );

    // =-=-=-=-=-=-=-
    // Contributor
    $contributor_name = NULL;
    data_model_get_node_metadata_field_value( $node, "contributor_name", $contributor_name );
       
    $contributor_contribution = NULL;
    data_model_get_node_metadata_field_value( $node, "contribution", $contributor_contribution );
     
    $contributor_email = NULL;
    data_model_get_node_metadata_field_value( $node, "contributor_email", $contributor_email );

    $contributor_organization = NULL;
    data_model_get_node_metadata_field_value( $node, "contributor_organization", $contributor_organization );
    
    $contributor_address = NULL;
    data_model_get_node_metadata_field_value( $node, "contributor_address", $contributor_address );
    
    $contributor_phone = NULL;
    data_model_get_node_metadata_field_value( $node, "contributor_phone", $contributor_phone );

    // =-=-=-=-=-=-=-
    // Date
    $date = date( "Y-m-d" );

    // =-=-=-=-=-=-=-
    // Subject
    $subject = NULL;
    data_model_get_node_metadata_field_value( $node, "subject", $subject );

    // =-=-=-=-=-=-=-
    // References
    $references = NULL;
    data_model_get_node_metadata_field_value( $node, "references", $references );

    // =-=-=-=-=-=-=-
    // Source
    $source_name = NULL;
    data_model_get_node_metadata_field_value( $node, "source_name", $source_name );
    
    $source_comments = NULL;
    data_model_get_node_metadata_field_value( $node, "source_comments", $source_comments );
    
    $source_id = NULL;
    data_model_get_node_metadata_field_value( $node, "source_id", $source_id );

    // =-=-=-=-=-=-=-
    // Type
    $type = node_type_get_name( $node );

    // =-=-=-=-=-=-=-
    // Type
    $rights = NULL;
    data_model_get_node_metadata_field_value( $node, "rights", $rights );

    // =-=-=-=-=-=-=-
    // Format 
    $format = "csv";
    // need to determine format from content type here

    // =-=-=-=-=-=-=-
    // Coverage
    $coverage_spatial = NULL;
    data_model_get_node_metadata_field_value( $node, "coverage_spatial", $coverage_spatial );

    $coverage_temporal = NULL;
    data_model_get_node_metadata_field_value( $node, "coverage_temporal", $coverage_temporal );

    // =-=-=-=-=-=-=-
    // Description
    $body = field_get_items( 'node', $node, 'body' );
    $description = $body[0]['value'];

    $hostname = $_SERVER['SERVER_NAME'];
    $url = "http://". $hostname . "?q=node/" . $node->nid;

    $meta_data = '<?xml version="1.0" encoding="UTF-8"?>
    <rdf:RDF 
        xmlns:citoterms="http://purl.org/spar/cito/"
        xmlns:dc="http://purl.org/dc/elements/1.1/"
        xmlns:dcterms="http://purl.org/dc/terms/"
        xmlns:foaf="http://xmlns.com/foaf/0.1/"
        xmlns:hsterms="http://hydro.urwl.usu.edu/hydroshare/terms/"
        xmlns:ore="http://www.openarchives.org/ore/terms/"
        xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
        xmlns:rdfsl="http:/www.w3.org/2001/01/rdf-schema#"
    >
        <rdf:Description>
            <dc:creator>
                <hsterms:name>'.$name.'</hsterms:name>
                <hsterms:email>'.$email.'</hsterms:email>
                <hsterms:organization>'.$organization.'</hsterms:organization>
                <hsterms:address>'.$address.'</hsterms:address>
                <hsterms:phone>'.$phone.'</hsterms:phone>     
            </dc:creator>
            <dc:contributor>
                <hsterms:name>'.$contributor_name.'</hsterms:name>
                <hsterms:contribution>'.$contributor_contribution.'</hsterms:contribution>
                <hsterms:email>'.$contributor_email.'</hsterms:email>
                <hsterms:address>'.$contributor_address.'</hsterms:address>
                <hsterms:phone>'.$contributor_phone.'</hsterms:phone>     
            </dc:contributor>
            <dcterms:created xsi:type="dcterms:W3CDTF>'.date( "Y-M-D", $node->created).'</dc:created>
            <dcterms:modified xsi:type="dcterms:W3CDTF>'.$date.'</dc:modified>
            <dc:publisher>http://'.$hostname.'</dc:publisher>
            <dc:subject>'.$subject.'</dc:subject>
            <dc:description>'.$description.'</dc:description>
            <dc:identifier xsi:type="dcterms:URI">'.$url.'</dc:identifier>
            <dc:relation>
                <dcterm:isVersionOf>'.$url.'</dcterm:isVersionOf>
                <version>1</version> 
                <dcterm:references>'.$references.'</dcterm:references> 
            </dc:relation>
            <dc:source>
                <hsterms:name>'.$source_name.'</hsterms:name>
                <hsterms:comments>'.$source_comments.'</hsterms:comments>
                <hsterms:identifier>'.$source_id.'</hsterms:identifier> 
            </dc:source>
            <dc:rights>'.$rights.'</dc:rights>
            <dc:format>'.$format.'</dc:format>
            <dc:type>'.$type.'</dc:type>
            <dc:title>'.$node->title.'</dc:title>
            <dc:coverage>
                <hsterms:spatial>'.$coverage_spatial.'</hsterms:spatial>
                <hsterms:temporal>'.$coverage_temporal.'</hsterms:temporal> 
            </dc:coverage>
            <dc:language>eng</dc:language>
        </rdf:Description>
    </rdf:RDF>';

    // =-=-=-=-=-=-=-
    // actually write the file
    file_put_contents( "$dir/sciencemetadata.xml", $meta_data );

    return true;

} // data_model_write_science_metadata

// =-=-=-=-=-=-=-
// create the data viz thumbnail and include it in the data model directory
function data_model_create_viz_thumbnail( $node, $dir ) {
    // =-=-=-=-=-=-=-
    // for now rely on the default thumbnail
    $dst_dir = drupal_dirname( $dir );
    $src_dir = drupal_dirname( drupal_dirname( $dst_dir ) );
    $src = $src_dir."/default_thumbnail.png";
    $dst = $dst_dir."/thumbnail.png";
  
    error_log( "SRC:".$src );  
    error_log( "DST:".$dst );  
    
    return file_unmanaged_copy( $src, $dst );

} // data_model_create_viz_thumbnail

// =-=-=-=-=-=-=-
// write out an xml file given metadata from the node ( dublin core++ )
function data_model_write_system_metadata( $node, $dir ) {
    $file = NULL;
    data_model_get_file_from_node( $node, $file );
  
    $hostname  = $_SERVER['SERVER_NAME'];
    $file_uri  = str_replace( 'public://', 'http://'.$hostname.'/sites/default/files/', $file->uri );
    $file_name = $file->filename;
    $sci_mdata = drupal_dirname( $file_uri ) . '/sciencemetadata.xml';
    $sys_mdata = drupal_dirname( $file_uri ) . '/resourcemap.xml';
    $format    = $file->filemime;
                        
    $type = node_type_get_name( $node ); 
    $user = user_load(array('uid' => $node->uid));
    $created = date('Y-m-d\TH:i:s', $node->created ); 
    $meta_data = '<?xml version="1.0" encoding="UTF-8"?>
    <rdf:RDF 
        xmlns:citoterms="http://purl.org/spar/cito/"
        xmlns:dc="http://purl.org/dc/elements/1.1/"
        xmlns:dcterms="http://purl.org/dc/terms/"
        xmlns:foaf="http://xmlns.com/foaf/0.1/"
        xmlns:hsterms="http://hydro.urwl.usu.edu/hydroshare/terms/"
        xmlns:ore="http://www.openarchives.org/ore/terms/"
        xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
        xmlns:rdfsl="http:/www.w3.org/2001/01/rdf-schema#"
    >
        <rdf:description rdf:about=' . $file_uri  . '>
            <dcterms:identifier>'    . $file_name . '</dcterms:identifier>
            <dcterms:isAggregatedBy>'. $sci_mdata . '</dcterms:identifier>
            <dcterms:format>'        . $format    . '</dcterms:format>
        </rdf:description>
        <rdf:description rdf:about='        . $sys_mdata   . '>
            <dcterms:isDocumentedBy>'       . $sci_mdata   . '</dcterms:isDocumentedBy>
            <dcterms:creator rdf:nodeID="'  . $node->nid   . '"/>
            <dc:title>'                     . $node->title . '</dc:title>
            <ore:aggregates rdf:resource="' . $file_uri    . '"/>
            <ore:aggregates rdf:resource="' . $sci_mdata   . '"/>
            <dcterms:created>'              . $created     . '</dcterms:created>
            <rdf:type rdf:resource="http://www.openarchives.org/ore/terms/Aggregation"/>
            <hsterms:hydroshareResourceType>' . $type . '</hsterms:hydroshareResourceType>
        </rdf:description>
        <rdf:description rdf:nodeID="' . $node->nid  . '">
            <foaf:name>'               . $user->name . '</foaf:name>
        </rdf:description>
        <rdf:description rdf:about="http://www.openarchives.org/ore/terms/ResourceMap">
            <rdfsl:label>ResourceMap</rdfsl:label>
            <rdfsl:isDefinedBy rdf:resource="http://www.openarchives.org/ore/terms/"/>
        </rdf:description> 
        <rdf:description rdf:about="http://www.openarchives.org/ore/terms/Aggregation">
            <rdfsl:label>Aggregation</rdfsl:label>
            <rdfsl:isDefinedBy rdf:resource="http://www.openarchives.org/ore/terms/"/>
        </rdf:description> 
        <rdf:description rdf:about=' . $sys_mdata  . '>
            <ore:describes rdf:resource=' . $sys_mdata  . '#aggregation/>
            <dcterms:creator rdf:resource=HydroShare/>
            <dc:format></dc:format>
            <dcterms:modified>' . date('Y-m-d\TH;i:s') . '</dcterms:modified> 
            <rdf:type rdf:resource="http://www.openarchives.org/ore/terms/ResourceMap"/>
            <dcterms:created>' . $created . '</dcterms:created>
        </rdf:description> 
        <rdf:description rdf:about="' . $sci_mdata . '>
            <dcterms:identifier>sciencemetadata.xml</dcterms:identifier>
            <dcterms:isAggregatedBy>' . $sys_mdata . '</dcterms:isAggregatedBy>
            <citoterms:documents>'    . $sci_mdata . '<citoterms:documents>
            <dc:title>Science metadata document describing the aggregation </dc:title>
        </rdf:description>
   </rdf:RDF>';


    // =-=-=-=-=-=-=-
    // actually write the file
    file_put_contents( "$dir/resourcemap.xml", $meta_data );

    return true;

} // data_model_write_system_metadata

// =-=-=-=-=-=-=-
// write out the BagIt metadata: manifest-sha1.txt & bagit.txt
function data_model_write_bagit_metadata( $dir ) {
    // =-=-=-=-=-=-=-
    // strip off the 'data' portion of the dir
    $rdm_dir = dirname( $dir );
    
    // =-=-=-=-=-=-=-
    // write the bagit file
    $meta_data = "BagIt-Version: 0.97\nTag-File-Character-Encoding: UTF-8\n";
    file_put_contents( "$rdm_dir/bagit.txt", $meta_data );

    // =-=-=-=-=-=-=-
    // iterate over the data dir and compute checksums
    // then write them to the manifest file
    $vals  = array();
    $files = new RecursiveIteratorIterator( new RecursiveDirectoryIterator( $dir ) );
                                            
    foreach( $files as $file ) {
        if( false == is_dir( $file ) ) {
            // =-=-=-=-=-=-=-
            // compute the sha1 and put it in the manifest
            $sha1 = sha1_file( $file );

            // =-=-=-=-=-=-=-
            // trim the path to the data directory and beyond
            $trim_pos = strrpos( $file, "/" );
            $sub_path = substr( $file, $trim_pos );
            $line     = $sha1 . " data" . substr( $file, $trim_pos ) . "\n";
           
            array_push( $vals, $line );
        }

    } // foreach $file
        
    file_put_contents( "$rdm_dir/manifest-sha1.txt", $vals );

    return true;

} // data_model_write_bagit_metadata

// =-=-=-=-=-=-=-
// hook to move file into Data Model Directory for this Resource
function data_model_node_presave( $node ) {
    // =-=-=-=-=-=-=-
    // filter out non hydroshare content types
    $pos = strpos( $node->type, 'hydroshare_' );
    if( false === $pos ) { 
       return NULL; 
    }

    // =-=-=-=-=-=-=-
    // get the title and use this as the directory name
    $title = $node->title;
    
    // =-=-=-=-=-=-=-
    // get the file object from the node
    $file      = NULL;
    $real_path = NULL;
    if( true == data_model_get_file_from_node( $node, $file ) ) { 
        $file_uri = $file->uri;
    }

    // =-=-=-=-=-=-=-
    // something bad happened
    if( NULL == $title && NULL == $file_uri ) {
        drupal_set_message( "data_model_node_presave :: NULL title and file_uri" );
        return;
    }
    
    // =-=-=-=-=-=-=-
    // get the new path, if there is one.  if the real and new paths dont
    // match we need to make the Data Model Directory and then move the file
    $new_uri_path = NULL;
    if( data_model_make_data_path( $title, $file_uri, $new_uri_path ) ) {
        // =-=-=-=-=-=-=-
        // if new_uri_path != file_uri then we need to make a dir and
        // move the file.
        if( $file_uri != $new_uri_path ) {
            // =-=-=-=-=-=-=-
            // make the base directory
            if( !drupal_mkdir( $new_uri_path ) ) {
                drupal_set_message( "data_model_node_presave :: drupal_mkdir( $new_uri_path ) failed." );
                return false;

            }

            // =-=-=-=-=-=-=-
            // make the data directory per BagIt spec
            if( !drupal_mkdir( "$new_uri_path/data" ) ) {
                drupal_set_message( "data_model_node_presave :: drupal_mkdir( $new_uri_path/data ) failed." );
                return false;

            }

            // =-=-=-=-=-=-=-
            // move the file 
            // NOTE:: file_move requires a stream wrapper URI which is
            //        decidedly not an actual file path.
            $new_uri_path = $new_uri_path . "/data/" . drupal_basename( $file_uri );
            $fn  = drupal_basename( $file_uri );
            if( !file_move( $file, $new_uri_path ) ) {
                drupal_set_message( "data_model_node_presave :: file_move( $file_uri, $new_uri_path ) failed." );
                return false;
            }
        }

    } else {
        drupal_set_message( "data_model_node_presave :: data_model_make_data_path failed." );
        return false;
    }
 
    // =-=-=-=-=-=-=-
    // we need to operate on actual file paths now
    $new_file_path = drupal_realpath( $new_uri_path );

    // =-=-=-=-=-=-=-
    // write the science metadata file
    if( !data_model_write_science_metadata( $node, drupal_dirname( $new_file_path ) ) ) {
        drupal_set_message( "data_model_node_view :: failed to write science metadata for $new_file_path" );
        return NULL;

    }
 
    // =-=-=-=-=-=-=-
    // create the data viz thumbnail
    if( !data_model_create_viz_thumbnail( $node, drupal_dirname( $new_file_path ) ) ) {
        drupal_set_message( "data_model_node_view :: failed to data viz thumbnail for $new_file_path" );
        return NULL;

    }

    // =-=-=-=-=-=-=-
    // write the system metadata file
    if( !data_model_write_system_metadata( $node, drupal_dirname( $new_file_path ) ) ) {
        drupal_set_message( "data_model_node_view :: failed to write system metadata for $new_file_path" );
        return NULL;

    }

    // =-=-=-=-=-=-=-
    // write the BagIt metadata files
    if( !data_model_write_bagit_metadata( drupal_dirname( $new_file_path ) ) ) {
        drupal_set_message( "data_model_node_view :: failed to write bagit metadata for $new_file_path" );
        return NULL;
    }

} // data_model_node_presave

// =-=-=-=-=-=-=-
// add a export button
function data_model_node_view( $node, $view_mode ) {
    // =-=-=-=-=-=-=-
    // only export for hydroshare type content
    $pos = strpos( $node->type, 'hydroshare_' );
    if( false === $pos ) { 
       return NULL; 
    }

    // =-=-=-=-=-=-=-
    // only export for hydroshare type content
    $pos = strpos( $node->type, 'hydroshare_' );
    if( false === $pos ) { 
       return NULL; 
    }

    // =-=-=-=-=-=-=-
    // only export on full view
    if( "full" != $view_mode ) {
        return $node;
    }
 
    // =-=-=-=-=-=-=-
    // get the file object from the node
    $file      = NULL;
    $real_path = NULL;
    if( true == data_model_get_file_from_node( $node, $file ) ) { 
        $real_path = drupal_realpath( $file->uri );
    
    } else {
        error_log( "data_model_node_view :: failed to get file for node" );
        return NULL;

    }

    // =-=-=-=-=-=-=-
    // get the file directory
    $dir = drupal_dirname( $real_path );
    $dir = drupal_dirname( $dir );

    // =-=-=-=-=-=-=-
    // get the zip name of the directory
    $zip_file = NULL;
    if( data_model_zip_file_name( $dir, $zip_file ) == false ) {
        error_log( "data_model_node_view :: data_model_zip_file_name failed for $dir" );
        return NULL;

    }
    
    // =-=-=-=-=-=-=-
    // build the java script operation
    $hostname = $_SERVER['SERVER_NAME'];
    $op = "parent.location='http://$hostname/export.php?file=" . $zip_file . "'";

    // =-=-=-=-=-=-=-
    // wire it to a button
    $node->content['button'] = array(
          '#type' => 'button',
          '#value' => t('Export'),
          '#weight' => 50,
          '#class' => 'greyButton',
          '#attributes' => array('onClick' => $op),
          );

    // =-=-=-=-=-=-=-
    // win!!111one
    return $node;

} // data_model_node_view

function data_model_views_api() {
      return array(
          'api' => 3.0,
      );
}

function data_model_views_pre_render(&$view) {
    //error_log( "XXXX - data_model_views_pre_render" );
    //print_r( $view );
}

function data_model_views_pre_view(&$view) {
    //error_log( "XXXX - data_model_views_pre_view" );
    //print_r( $view );
}





















































