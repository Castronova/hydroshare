<?php


/**
 *
 * Imports parser scripts
 */
import_parsers();
function import_parsers(){
  // Include parsing scripts 
    $model_class_names = array();
    $dir = dirname(__FILE__);
    $filenames = glob($dir."/parsers/*_parser.php");
    foreach ($filenames as $fn){
      $ret = module_load_include('php', 'hydrology_model','parsers/'.basename($fn,".php"));
      if ($ret){
        $model_class_names[] = reset(explode("_", basename($fn, ".php")));
      }
    }
    // store known model types globally
    $GLOBALS["model_class_names"] = $model_class_names;
}

/**
 *
 * Implements hook_form_alter()
 */
function hydrology_model_form_alter(&$form, &$form_state, $form_id){

  if ($form_id == 'hydroshare_hydrology_model_node_form'){
  
    // organize form fields within fieldsets
    hydrology_model_build_form($form);
  
  }
}

/**
 *
 * Fills form fields with model metadata using model input/output files
 * and calculated values.
 */
function hydrology_model_populate_fields($form, &$form_state){
  
  //***************************
  //* Parse the Spatial Input *  //TODO
  //***************************
  
  // Read Tiff File
  $tiff_fid = $form_state['values']['field_spatial_coverage']['und'][0]['fid'];
  $tiff = file_load($tiff_fid);
  if($tiff){
    $url = file_create_url($tiff->uri);
    $exif = exif_read_data($url, 'ANY_TAG', TRUE);
    foreach($exif as $key => $section){
      foreach ($section as $name => $val){
        log_to_file($key.$name.':'.$val.'\n');
      }
    }
  }
  
    //*************************
    //* Parse the Model Input *  
    //*************************
    
    // create a file instance from uploaded model
    $fid =  $form_state['values']['field_file']['und'][0]['fid'];
    $f = file_load($fid);   
    $url = file_create_url($f->uri);

    // get the absolute path of the upload file
    $wrapper = file_stream_wrapper_get_instance_by_uri($f->uri);
    $real_path = $wrapper->realpath();
    $path_array = explode('/',$real_path);
    
    // get the name of the folder the model is unzipped in
    $unzip_folder = substr(array_pop($path_array),0,-4);
    
    // get the directory of the upload file
    $path = pathinfo(realpath($real_path), PATHINFO_DIRNAME) . '/'.$unzip_folder;

    // unzip model
    $zip = new ZipArchive;
    $res = $zip->open($real_path);
    if ($res == TRUE){
      $zip->extractTo($path);
      $zip->close();
      echo 'Extracted Model Successfully';
    }
    else{
      echo 'Failed to Extract Model';
    }

    // TODO: Determine which model it is, based on known file extensions
    
    // get the folder name of the extracted model (assume first folder contains model)
    $folder = Null;
    $dirs = array_filter(glob($path . '/'), 'is_dir');
    foreach(new DirectoryIterator($path) as $file){
      if($file->isDot()) continue;

      if($file->isDir()){
        $folder = $file->getFilename();
        break;
      }
    }

    
    //*************************
    //* Set Form Field Values *
    //*************************
    
    $parser_class =  $form_state['values']['field_model_name']['und'][0]['value'];
    
    // parse model data using the designated parsing script
    $parser = new $parser_class;
    $parser->parse_metadata($form, $form_state, $path . '/' . $folder);
  
    // set contribute date
    $today = date('m/d/Y', time());
    $form_state['input']['field_dev_contrib_date']['und'][0]['value'] = $today;

    // set user fields
    global $user;
    $user_fields = user_load($user->uid);
    $form_state['input']['field_dev_contributor']['und'][0]['value'] = $user_fields->name;
    $form_state['input']['field_dev_creator']['und'][0]['value'] = $user_fields->name;

    // set default values
    $form_state['input']['field_id_version']['und'][0]['value'] = '1.0';

    // rebuild the form
    $form_state['rebuild'] = TRUE;
  
}

/**
 *
 * Organizes fields within fieldsets and builds the webform.
 */
function hydrology_model_build_form(&$form){
  
  $form['#attributes'] = array('enctype' => 'multipart/form-data');
  
  //*****************************************
  //* Create fieldsets to organize the form *
  //*****************************************
  
  $form['input_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Upload Model Files'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    ) ;
  $form['populate_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Automatically Populate Fields'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    ) ;
  $form['id_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Resource Identification'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'main_form',
    ) ;
  $form['temporal_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Temporal Definition'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'main_form',
    ) ;
  $form['spatial_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Spatial Definition'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'main_form',
    ) ;
  $form['dev_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Development'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'main_form',
    ) ;
  $form['contact_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Contact Information'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'main_form',
    ) ;
  $form['contributor_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Contributor Information'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'main_form',
    ) ;
  $form['creator_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Creator Information'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'main_form',
    ) ;
  
    // create group to hold vertical tabs
    $form['main_form'] = array(
        '#type' => 'vertical_tabs',
    );
  
    // create button to automatically populate form fields
    $form['populate_fieldset']['hydrology_model_populate_button'] = array(
        '#type' => 'submit',
        '#value'=> t('Auto Populate Fields'),
        '#submit'=>array('hydrology_model_populate_fields'),
        );
    
    $form['populate_fieldset']['populate_button_text'] = array(
    '#markup' => '<p>Populate model fields automatically using the model files uploaded above, and the designated parser.</p>'
        );
    

    //**************************************
    //* move cck field into input fieldset *
    //**************************************
    
    // move file upload fields
    $form['input_fieldset']['field_file'] = $form['field_file'];
    $form['field_file'] = array('language' => NULL);
    
    //$form['input_fieldset']['field_model_archive'] = $form['field_model_archive'];
    $form['field_model_archive'] = array('language' => NULL);
    
    $form['input_fieldset']['field_spatial_coverage'] = $form['field_spatial_coverage'];
    $form['field_spatial_coverage'] = array('language' => NULL);

    $options = array();
    foreach($GLOBALS["model_class_names"] as $model_name){
      $options[$model_name] = $model_name;
    }
    $form['input_fieldset']['field_model_name'] = $form['field_model_name'];
    $form['field_model_name'] = array('language' => NULL);
    $form['input_fieldset']['field_model_name']['und']['#options'] = $options;
    
    // move identification fields into id_fieldset
    $form['id_fieldset']['field_id_description'] = $form['field_id_description'];
    $form['field_id_description'] = array('language' => NULL);

    $form['id_fieldset']['field_id_version'] = $form['field_id_version'];
    $form['field_id_version'] = array('language' => NULL);
    
    $form['id_fieldset']['field_id_type'] = $form['field_id_type'];
    $form['field_id_type'] = array('language' => NULL);
    
    // move temporal coverage fields into temporal_fieldset
    $form['temporal_fieldset']['field_temporal_begin'] = $form['field_temporal_begin'];
    $form['field_temporal_begin'] = array('language' => NULL);

    $form['temporal_fieldset']['field_temporal_end'] = $form['field_temporal_end'];
    $form['field_temporal_end'] = array('language' => NULL);

    $form['temporal_fieldset']['field_temporal_interval'] = $form['field_temporal_interval'];
    $form['field_temporal_interval'] = array('language' => NULL);


    // move spatial coverage fields into spatial_fieldset
    $form['spatial_fieldset']['field_spatial_location'] = $form['field_spatial_location'];
    $form['field_spatial_location'] = array('language' => NULL);

    $form['spatial_fieldset']['field_spatial_resolution'] = $form['field_spatial_resolution'];
    $form['field_spatial_resolution'] = array('language' => NULL);

    $form['spatial_fieldset']['field_spatial_bbox'] = $form['field_spatial_bbox'];
    $form['field_spatial_bbox'] = array('language' => NULL);

    $form['spatial_fieldset']['field_spatial_reference'] = $form['field_spatial_reference'];
    $form['field_spatial_reference'] = array('language' => NULL);

    
    // move development fields into dev_fieldset
    //$form['dev_fieldset']['field_dev_contributor'] = $form['field_dev_contributor'];
    $form['field_dev_contributor'] = array('language' => NULL);

    //$form['dev_fieldset']['field_dev_creator'] = $form['field_dev_creator'];
    $form['field_dev_creator'] = array('language' => NULL);

    $form['dev_fieldset']['field_dev_create_date'] = $form['field_dev_create_date'];
    $form['field_dev_create_date'] = array('language' => NULL);
    
    $form['dev_fieldset']['field_dev_contrib_date'] = $form['field_dev_contrib_date'];
    $form['field_dev_contrib_date'] = array('language' => NULL);
    
    $form['dev_fieldset']['field_dev_level'] = $form['field_dev_level'];
    $form['field_dev_level'] = array('language' => NULL);

    $form['dev_fieldset']['field_rights'] = $form['field_rights'];
    $form['field_rights'] = array('language' => NULL);
    
    
    //move contact fields into contact_fieldset
    $form['contact_fieldset']['field_contact_email'] = $form['field_contact_email'];
    $form['field_contact_email'] = array('language' => NULL);

    $form['contact_fieldset']['field_contact_phone'] = $form['field_contact_phone'];
    $form['field_contact_phone'] = array('language' => NULL);

    $form['contact_fieldset']['field_contact_address'] = $form['field_contact_address'];
    $form['field_contact_address'] = array('language' => NULL);

    $form['contact_fieldset']['field_contact_uri'] = $form['field_contact_uri'];
    $form['field_contact_uri'] = array('language' => NULL);

    // ---------------------------
    // create core-metadata fields
    // ---------------------------
    
    // move contributor fields into contributor_fieldset
    $form['contributor_fieldset']['field_contributor_name'] = $form['field_contributor_name'];
    $form['field_contributor_name'] = array('language' => NULL);

    $form['contributor_fieldset']['field_contribution'] = $form['field_contribution'];
    $form['field_contribution'] = array('language' => NULL);

    $form['contributor_fieldset']['field_contributor_email'] = $form['field_contributor_email'];
    $form['field_contributor_email'] = array('language' => NULL);

    $form['contributor_fieldset']['field_contributor_organization'] = $form['field_contributor_organization'];
    $form['field_contributor_organization'] = array('language' => NULL);
    
    $form['contributor_fieldset']['field_contributor_address'] = $form['field_contributor_address'];
    $form['field_contributor_address'] = array('language' => NULL);
    
    $form['contributor_fieldset']['field_contributor_phone'] = $form['field_contributor_phone'];
    $form['field_contributor_phone'] = array('language' => NULL);
    
    // move creator fields into creator_fieldset
    $form['creator_fieldset']['field_name'] = $form['field_name'];
    $form['field_name'] = array('language' => NULL);

    $form['creator_fieldset']['field_email'] = $form['field_email'];
    $form['field_email'] = array('language' => NULL);

    $form['creator_fieldset']['field_organization'] = $form['field_organization'];
    $form['field_organization'] = array('language' => NULL);

    $form['creator_fieldset']['field_address'] = $form['field_address'];
    $form['field_address'] = array('language' => NULL);
    
    $form['creator_fieldset']['field_phone_number'] = $form['field_phone_number'];
    $form['field_phone_number'] = array('language' => NULL);
}

/**
 *
 * Implements hook_node_submit()
 */
function hydrology_model_node_submit($node, $form, &$form_state){

    // set the resource creation date
    $node->created = !empty($node->date) ? strtotime($node->date) : REQUEST_TIME;
  
    // move the model file location

//    $file = null;
//    $new_uri_path = null;
//    data_model_get_file_from_node( $node, $file );
//
//    $title = $node->title;
//    $file_uri = $file->uri;
//    data_model_make_data_path( $title, $file_uri, $new_uri_path );
//
//    $fid =  $node->field_file['und'][0]['fid'];
//    $f = file_load($fid);   
//    $url = file_create_url($f->uri);
//    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
//    $real_path = $wrapper->realpath();
//    $path_array = explode('/',$real_path);
//                      
//    
//    // set the model path
//    //$model_path = join(array_slice(explode('/',$url),0,-1),'/').'/model';
//    //if(!file_exists(join(array_slice($path_array,0,-1),'/').'/model')){
//
//        //
//        $zip = new ZipArchive;
//        $res = $zip->open($real_path);
//        if ($res == TRUE){
//
//          // get the model folder name by peeking into zip
//          $z = zip_open($real_path);
//          $zip_entry = zip_read($z);
//          $model_folder = zip_entry_name($zip_entry);
//          $model_folder = array_slice(explode('/',$model_folder),0,1);
//
//          // create the unzip directory
//          $uri_instance = file_stream_wrapper_get_instance_by_uri($new_uri_path);
//          $unzip_dir = $uri_instance->realpath();
//          //$unzip_dir = array_slice($path_array,0,-1);
//          //$unzip_dir = join($unzip_dir,'/');
//
//          // extract the model contents
//          $zip->extractTo($unzip_dir);
//          $zip->close();
//
//          // rename the model folder to something more standardized
//          rename($unzip_dir.'/'.$model_folder[0], $unzip_dir.'/model');
//
//        }
    //}
                        
    // save changes
    node_save($node);
    
}


/**
 * Implements hook_help.
 *
 * Displays help and module information.
 */
function hydrology_model_help($path, $arg) {
  switch ($path) {
    case "admin/help#hydrology_model":
      return '<p>' . t("Creates resource instances for hydrology models.") . '</p>';
      break;
  }
} 

/**
 *
 * Log function for hydrology_model
 */
function log_to_file($text) {
  // note: cwd = ~/Desktop/hydroshare/
  // note: make sure folder permissions make file accessible
  $f = fopen('./sites/default/files/hydrology_model.log', 'a');
  fwrite($f, date('Ymd H:i:s - ') . $text . "\n");
  fclose($f);
}
